"""
Django settings for books_manage project.

Generated by 'django-admin startproject' using Django 4.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-by7njk8lz1g6m*x$xl%i1#3-qprsl^o5g2p#y(i^s-1sv!ak44'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # ------- 第三方包 ---------
    'rest_framework',
    'django_filters',
    'django_celery_results',

    # ------- 本地App ---------
    'Apps.books',
    'Apps.user',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'utils.apiLogging.ApiLoggingMiddleware',
]

ROOT_URLCONF = 'books_manage.urls'

# AUTH_USER_MODEL = 'user.User'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'web'),
            os.path.join(BASE_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'books_manage.wsgi.application'

# ---- redis配置 -----
# Redis配置
REDIS_HOST = '127.0.0.1'
REDIS_PORT = 6379

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'books_manage',
        'USER': 'root',
        'PASSWORD': 'test@123',
        'HOST': '127.0.0.1',
        'PORT': '3306',
        'CONN_MAX_AGE': 21600
    },
    'mongo': {
        'ENGINE': None
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# 前端目录配置
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'web', 'dist', "static"),
]

# 用于保存用户上载文件的目录的绝对文件系统路径。
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# 如果设置为非空值，则必须以斜杠结尾。
MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

# Celery配置
BROKER_URL = 'redis://' + REDIS_HOST + ':' + str(REDIS_PORT) + '/13'
# 使用数据库作为结果存储
CELERY_RESULT_BACKEND = 'django-db'
# celery 的启动worker数量设置
CELERY_WORKER_CONCURRENCY = 5
# 启动时区设置
CELERY_ENABLE_UTC = True
# celery 时区
CELERY_TIMEZONE = TIME_ZONE
# celery 的worker 执行多少个任务后进行重启操作(可以防止内存泄露)
CELERY_WORKER_MAX_TASKS_PER_CHILD = 200
# 超时时间
CELERYD_TASK_TIME_LIMIT = 10 * 60

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"

# WebSocket相关配置
ASGI_APPLICATION = 'wqzb.asgi.application'  # 指定ASGI的路由地址

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [(REDIS_HOST, REDIS_PORT)],
        },
    },
}
# 时间格式
DATETIME_FORMAT = '%Y-%m-%d %H:%M:%S'

# djangorestframework 配置
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES':
        ('utils.rest_framework.authentication.UserAuthentication',
         ),
    'DEFAULT_FILTER_BACKENDS':
        ('django_filters.rest_framework.DjangoFilterBackend',),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_RENDERER_CLASSES': (
        # 'rest_framework.renderers.BrowsableAPIRenderer',
        'rest_framework.renderers.JSONRenderer',
    ),
    'DATETIME_FORMAT': DATETIME_FORMAT,
    'NON_FIELD_ERRORS_KEY': 'error',
    'EXCEPTION_HANDLER': 'utils.rest_framework.exception_handler.exception_handler'
}

# redis 缓存
USER_SESSION_DB = 11
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://{}:{}/{}".format(REDIS_HOST, REDIS_PORT, USER_SESSION_DB),
        "KEY_PREFIX": 'cache_',  # 前缀
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {"max_connections": 128}
            # "PASSWORD": "密码",
        }
    },
    "engin": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://{}:{}/{}".format(REDIS_HOST, REDIS_PORT, USER_SESSION_DB),
        "KEY_PREFIX": 'engin_',  # 前缀
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {"max_connections": 128},
            # "PASSWORD": "密码",
            "SOCKET_CONNECT_TIMEOUT": 5,  # 连接redis超时时间，单位为秒
            "SOCKET_TIMEOUT": 5,  # redis读写操作超时时间，单位为秒
        }
    }
}
USER_AGENTS_CACHE = 'default'

#  ---- session 设置 -----
# 过期时间
SESSION_COOKIE_AGE = 60 * 60 * 8  # 8小时
# 会话保存每个强
# SESSION_SAVE_EVERY_REQUEST = True
# 关闭浏览器，则COOKIE失效
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'

# ---- logging日志配置  -----
# log_path是存放日志的路径
log_path = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(log_path):
    os.mkdir(log_path)

# All日志目录
all_log_path = os.path.join(BASE_DIR, 'logs', 'all')
if not os.path.exists(all_log_path):
    os.mkdir(all_log_path)
# Info日志目录
info_log_path = os.path.join(BASE_DIR, 'logs', 'info')
if not os.path.exists(info_log_path):
    os.mkdir(info_log_path)
# Error日志目录
error_log_path = os.path.join(BASE_DIR, 'logs', 'error')
if not os.path.exists(error_log_path):
    os.mkdir(error_log_path)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '%(levelname)s %(asctime)s PID:%(process)d TID:%(thread)d %(filename)s %(lineno)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(asctime)s  %(filename)s %(lineno)d %(message)s'
        },
    },
    # 过滤
    'filters': {
    },
    'handlers': {
        # 默认日志
        'default': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(all_log_path, 'web_all.log'),
            'backupCount': 5,  # 备份数
            'when': 'midnight',  # 每天凌晨创建
            'formatter': 'standard',  # 输出格式
            'encoding': 'utf-8',  # 设置默认编码
        },
        # 输出错误日志
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(error_log_path, 'web_error.log'),
            'backupCount': 30,  # 备份数
            'when': 'midnight',  # 每天凌晨创建
            'formatter': 'standard',  # 输出格式
            'encoding': 'utf-8',  # 设置默认编码
        },
        # 控制台输出
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        # 输出info日志
        'info': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(info_log_path, 'web_info.log'),
            'backupCount': 15,
            'when': 'midnight',  # 每天凌晨创建
            'formatter': 'standard',
            'encoding': 'utf-8',  # 设置默认编码
        },
    },
    # 配置用那几种 handlers 来处理日志
    'loggers': {
        # 处理所有类型的日志， 默认调用
        'django': {
            'handlers': ['default', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'log': {
            'handlers': ['error', 'info', 'console', 'default'],
            'level': 'INFO',
            'propagate': False
        },
    }
}

try:
    from .local_settings import *
except ImportError:
    pass
